-- ****************************************************************************
-- Script para configuracao da base de dados do sistema Exlibris. 
-- Cria o banco de dados, configura as tabelas e popula as tabelas 
-- tradicionais com os valores de dom√≠nio previamente conhecidos. 
-- ****************************************************************************

-- ****************************************************************************
-- Lista de tabelas criadas pela DDL no script: 
-- ***********************
-- TABELAS PRINCIPAIS; 
--      OBRA, EXEMPLAR, PESSOA, EDITORA, ENDERECO, TELEFONE, EMAIL, 
--      AVALIACAO, OPINIAO 
-- ***********************
-- TABELAS SECUNDARIAS : 
--      TAG, IDX_CATLG 
-- ***********************
-- TABELAS ASSOCIATIVAS : 
--      IDIOMA_EXEMPLAR, AUTORES, PRODUTORES* , EMAIL_PESSOA, 
--      EMAIL_EDITORA, TELEFONE_PESSOA, TELEFONE_EDITORA
-- ***********************
-- TABELAS TRADICIONAIS : 
--      SEXO, PAPEL, FORMATO, PAIS, IDIOMA, GENERO, ESTADO
-- ****************************************************************************

-- Apaga o banco de dados anterior
DROP DATABASE EXLIBRIS; 

-- CRIA O BANCO DE DADOS
CREATE DATABASE EXLIBRIS;

-- UTILIZA O BD
USE EXLIBRIS;


-- ****************************************************************************
--  Criacao das tabelas tradicionais 
-- ****************************************************************************


-- TT001 - SEXO 
-- Dominio M - Masculino F - Feminino N Nao informado
CREATE TABLE EXLIBRIS.SEXO(
    SG_SEXO CHAR(1) NOT NULL UNIQUE, 
    SEXO CHAR(15) NOT NULL, 
    PRIMARY KEY(SG_SEXO)
); 

-- TT002 -  PAPEL
-- Papeis desempenhados por pessoas na producao ou manutencao das obras. 
-- Dominio Autor, tradutor, ilustrador, apresentador, organizador, editor, 
-- prefaciador, avaliador 
CREATE TABLE EXLIBRIS.PAPEL(
  COD_PAPEL INT NOT NULL AUTO_INCREMENT,
  PAPEL CHAR(30) NOT NULL,
  PRIMARY KEY(COD_PAPEL)
);

-- TT003-  FORMATO
-- Formato de apresentacao do exemplar. 
-- Dominio Hardcover, softcover, partitura, revista, fasciculo, journal. 
CREATE TABLE EXLIBRIS.FORMATO(
  COD_FORMATO INT NOT NULL AUTO_INCREMENT,
  FORMATO CHAR(30) NOT NULL,
  PRIMARY KEY(COD_FORMATO)
);

-- TT004 -  IDIOMA
-- NOMES DE IDIOMAS SEGUNDO A NORAM ISO-639 
CREATE TABLE EXLIBRIS.IDIOMA(
  SG_IDIOMA_ISO639 CHAR(3) NOT NULL UNIQUE,
  IDIOMA CHAR(30) NOT NULL,
  IDIOMA_INGLES CHAR(30) NULL, 
  PRIMARY KEY(SG_IDIOMA_ISO639)
);

-- TT005 - GENERO
-- Genero literario da obra. 
CREATE TABLE EXLIBRIS.GENERO(
  COD_GENERO INT NOT NULL AUTO_INCREMENT,
  GENERO CHAR(30) NOT NULL,
  PRIMARY KEY(COD_GENERO)
);

-- TT006 - PAIS 
-- NOMES DE PAISES SEGUNDO A NORMA ISO-3166-1
CREATE TABLE EXLIBRIS.PAIS(
  SG_PAIS CHAR(3) NOT NULL UNIQUE,
  PAIS CHAR(30) NOT NULL,
  PRIMARY KEY(SG_PAIS)
);

-- TT007 - ESTADO 
-- Estado ou provincia do endereco. E dependente do pais de origem. 
CREATE TABLE EXLIBRIS.ESTADO(
  SG_ESTADO CHAR(2) NOT NULL UNIQUE,
  SG_PAIS CHAR(3) NOT NULL,
  ESTADO CHAR(30) NOT NULL,
  PRIMARY KEY(SG_ESTADO,SG_PAIS),
  CONSTRAINT FK_SG_PAIS_ESTADO
    FOREIGN KEY(SG_PAIS)
    REFERENCES EXLIBRIS.PAIS(SG_PAIS)
    ON DELETE CASCADE
    ON UPDATE NO ACTION
);


-- ****************************************************************************
--  Criacao das tabelas tradicionais de tipo
-- ****************************************************************************

-- TT008 - TIPO_TELEFONE
-- Dominio P Principal B Bureau C Celular F Fax
CREATE TABLE EXLIBRIS.TIPO_TELEFONE(
  SG_TIPO_TELEFONE CHAR(3) NOT NULL UNIQUE,
  TIPO_TELEFONE CHAR(30) NOT NULL,
  PRIMARY KEY(SG_TIPO_TELEFONE)
);

-- TT009 -  TIPO_ENDERECO
-- Dominio P Principal B Bureau S Secundario 
CREATE TABLE EXLIBRIS.TIPO_ENDERECO(
  SG_TIPO_ENDERECO CHAR(3) NOT NULL UNIQUE,
  TIPO_ENDERECO CHAR(30) NOT NULL,
  PRIMARY KEY(SG_TIPO_ENDERECO)
);

-- TT010 -  TIPO_EMAIL
-- Dominio P Principal S Secundario
CREATE TABLE EXLIBRIS.TIPO_EMAIL(
  SG_TIPO_EMAIL CHAR(3) NOT NULL UNIQUE,
  TIPO_EMAIL CHAR(30) NOT NULL,
  PRIMARY KEY(SG_TIPO_EMAIL)
);

-- TT011 -  TIPO_OPINIAO
-- Dominio L Like D Dislike H Hated 
CREATE TABLE EXLIBRIS.TIPO_OPINIAO(
  SG_TIPO_OPINIAO CHAR(3) NOT NULL UNIQUE,
  TIPO_OPINIAO CHAR(30) NOT NULL,
  PRIMARY KEY(SG_TIPO_OPINIAO)
);

-- TT012 - TIPO STATUS 
-- Dominio A Ativo P Pendente D Desativado E Excluido
CREATE TABLE EXLIBRIS.TIPO_STATUS(
  SG_TIPO_STATUS CHAR(3) NOT NULL UNIQUE,
  TIPO_STATUS CHAR(30) NOT NULL,
  PRIMARY KEY(SG_TIPO_STATUS)
);


-- ****************************************************************************
--  Criacao das tabelas secundarias 
-- ****************************************************************************

-- TS001 - ENDERECO 
CREATE TABLE EXLIBRIS.ENDERECO(
  COD_ENDERECO INT NOT NULL AUTO_INCREMENT,
  SG_TIPO_ENDERECO CHAR(3) NOT NULL,
  NUMERO CHAR(6) NULL, 
  ENDERECO CHAR(60) NOT NULL,
  APARTAMENTO CHAR(5) NULL,
  CODIGO_POSTAL CHAR(12) NULL,
  CIDADE CHAR(30) NOT NULL,
  SG_ESTADO CHAR(2) NULL,
  SG_PAIS CHAR(3) NULL,
  SG_TIPO_STATUS CHAR(1) NULL, 
  DATA_EFETIVA DATE NULL, 
  DATA_FIM DATE NULL,   
  PRIMARY KEY(COD_ENDERECO),
  CONSTRAINT FK_ESTADO_ENDERECO
    FOREIGN KEY(SG_ESTADO)
    REFERENCES EXLIBRIS.ESTADO(SG_ESTADO)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_PAIS_ENDERECO
    FOREIGN KEY(SG_PAIS)
    REFERENCES EXLIBRIS.PAIS(SG_PAIS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_TIPO_ENDERECO
    FOREIGN KEY(SG_TIPO_ENDERECO)
    REFERENCES EXLIBRIS.TIPO_ENDERECO(SG_TIPO_ENDERECO)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_STATUS_ENDERECO
    FOREIGN KEY(SG_TIPO_STATUS)
    REFERENCES EXLIBRIS.TIPO_STATUS(SG_TIPO_STATUS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- TS002 - TELEFONE 
CREATE TABLE EXLIBRIS.TELEFONE(
  COD_TELEFONE INT NOT NULL AUTO_INCREMENT,
  SG_TIPO_TELEFONE CHAR(3) NOT NULL,
  CODIGO_AREA CHAR(5) NOT NULL,
  NUMERO_TELEFONE CHAR(12) NOT NULL,
  RAMAL CHAR(5) NULL, 
  SG_TIPO_STATUS CHAR(1) NULL, 
  DATA_EFETIVA DATE NULL, 
  DATA_FIM DATE NULL,   
  PRIMARY KEY(COD_TELEFONE),
  CONSTRAINT FK_TIPO_TELEFONE
    FOREIGN KEY(SG_TIPO_TELEFONE)
    REFERENCES EXLIBRIS.TIPO_TELEFONE(SG_TIPO_TELEFONE)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT FK_STATUS_TELEFONE
    FOREIGN KEY(SG_TIPO_STATUS)
    REFERENCES EXLIBRIS.TIPO_STATUS(SG_TIPO_STATUS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION	
);

-- TS003 - EMAIL 
CREATE TABLE EXLIBRIS.EMAIL(
  COD_EMAIL INT NOT NULL AUTO_INCREMENT,
  SG_TIPO_EMAIL CHAR(3) NOT NULL,
  EMAIL CHAR(60) NOT NULL UNIQUE,
  CODIGO_AREA CHAR(5) NOT NULL,
  NUMERO_TELEFONE CHAR(12) NOT NULL,
  RAMAL CHAR(5) NULL, 
  SG_TIPO_STATUS CHAR(1) NULL,
  DATA_EFETIVA DATE NULL, 
  DATA_FIM DATE NULL,   
  PRIMARY KEY(COD_EMAIL),
  CONSTRAINT FK_TIPO_EMAIL
    FOREIGN KEY(SG_TIPO_EMAIL)
    REFERENCES EXLIBRIS.TIPO_EMAIL(SG_TIPO_EMAIL)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT FK_STATUS_EMAIL
    FOREIGN KEY(SG_TIPO_STATUS)
    REFERENCES EXLIBRIS.TIPO_STATUS(SG_TIPO_STATUS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION	
);


-- ****************************************************************************
--  Criacao das tabelas principais
-- ****************************************************************************

-- TP001 - OBRA
CREATE TABLE EXLIBRIS.OBRA(
  COD_OBRA INT NOT NULL AUTO_INCREMENT,
  TITULO CHAR(60) NOT NULL,
  SUBTITULO CHAR(60) NULL,
  TITULO_ORIGINAL CHAR(60) NULL,
  SG_IDIOMA_ORIGINAL CHAR(3) NULL,	
  COD_GENERO INT NULL,
  SUMARIO VARCHAR(2048),
  SG_TIPO_STATUS CHAR(1) NULL, 
  PRIMARY KEY(COD_OBRA),
  CONSTRAINT FK_IDIOMA_ORIGINAL_OBRA
    FOREIGN KEY (SG_IDIOMA_ORIGINAL)
    REFERENCES EXLIBRIS.IDIOMA(SG_IDIOMA_ISO639)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_GENERO_OBRA
    FOREIGN KEY (COD_GENERO)
    REFERENCES EXLIBRIS.GENERO(COD_GENERO)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION, 
  CONSTRAINT FK_STATUS_OBRA
    FOREIGN KEY(SG_TIPO_STATUS)
    REFERENCES EXLIBRIS.TIPO_STATUS(SG_TIPO_STATUS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION		
);

-- TP002 - EDITORA 
CREATE TABLE EXLIBRIS.EDITORA(
  COD_EDITORA INT NOT NULL AUTO_INCREMENT,
  NOME_EDITORA CHAR(60) NOT NULL,
  COD_ENDERECO INT NULL,
  COD_TELEFONE INT NULL, 
  COD_EMAIL INT NULL, 
  SITE CHAR(60) NULL,
  PRIMARY KEY(COD_EDITORA),
  CONSTRAINT FK_ENDERECO_EDITORA
    FOREIGN KEY(COD_ENDERECO)
    REFERENCES EXLIBRIS.ENDERECO(COD_ENDERECO)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_TELEFONE_EDITORA
    FOREIGN KEY(COD_TELEFONE)
    REFERENCES EXLIBRIS.TELEFONE(COD_TELEFONE)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION, 
  CONSTRAINT FK_EMAIL_EDITORA
    FOREIGN KEY(COD_EMAIL)
    REFERENCES EXLIBRIS.EMAIL(COD_EMAIL)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION	
);

-- TP003 - PESSOA
CREATE TABLE EXLIBRIS.PESSOA(
  COD_PESSOA INT NOT NULL AUTO_INCREMENT,
  NOME CHAR(60) NOT NULL,
  SOBRENOME CHAR(60) NULL,
  DATA_NASCIMENTO DATE NULL,
  SG_SEXO CHAR(1) NULL, 
  SG_IDIOMA_ISO639 CHAR(3) NULL, 
  DOCUMENTO CHAR(30) NULL,
  BIO VARCHAR(2048) NULL,
  PRIMARY KEY(COD_PESSOA), 
  CONSTRAINT FK_SEXO_PESSOA
    FOREIGN KEY(SG_SEXO)
    REFERENCES EXLIBRIS.SEXO(SG_SEXO)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_IDIOMA_PESSOA
    FOREIGN KEY(SG_IDIOMA_ISO639)
    REFERENCES EXLIBRIS.IDIOMA(SG_IDIOMA_ISO639)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION  
);

-- TP004 - EXEMPLAR
CREATE TABLE EXLIBRIS.EXEMPLAR(
	COD_EXEMPLAR INT NOT NULL AUTO_INCREMENT, 
    COD_OBRA INT NOT NULL, 
    COD_FORMATO INT NULL, 
    COD_EDITORA INT NULL, 
    EDICAO_NO INT NULL, 
    EDICAO_LOCAL CHAR(30) NULL, 
	EDICAO_ANO CHAR(4) NULL, 
    QTE_PAGINAS INT NULL, 
	COLECAO CHAR(30) NULL, 
    COLECAO_NO CHAR(10) NULL,     
    CODIGO_BARRAS CHAR(13) NULL, 
    ISBN CHAR(13) NULL, 
    ISSN CHAR(13) NULL, 
    CDD CHAR(10) NULL, 
    MOEDA CHAR(3) NULL, 
    PRECO DECIMAL(5,2) NULL, 
	SG_TIPO_STATUS CHAR(1) NULL,
    PRIMARY KEY(COD_EXEMPLAR), 
    CONSTRAINT FK_OBRA_COD_EXEMPLAR
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION,
	CONSTRAINT FK_FORMATO_EXEMPLAR
		FOREIGN KEY(COD_FORMATO)
        REFERENCES EXLIBRIS.FORMATO(COD_FORMATO) 
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION,
	CONSTRAINT FK_EDITORA_EXEMPLAR
		FOREIGN KEY(COD_EDITORA) 
        REFERENCES EXLIBRIS.EDITORA(COD_EDITORA) 
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
  CONSTRAINT FK_STATUS_EXEMPLAR
    FOREIGN KEY(SG_TIPO_STATUS)
    REFERENCES EXLIBRIS.TIPO_STATUS(SG_TIPO_STATUS)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION				
);

-- ****************************************************************************
--  Criacao das tabelas secundarias restantes
-- ****************************************************************************

-- TS004 - TAG
CREATE TABLE EXLIBRIS.TAG(
	COD_TAG INT NOT NULL AUTO_INCREMENT, 
    COD_OBRA INT NOT NULL, 
    TAG CHAR(30) NOT NULL, 
    PRIMARY KEY(COD_TAG, COD_OBRA), 
    CONSTRAINT FK_OBRA_TAG
		FOREIGN KEY(COD_OBRA)
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION
);

-- TS005 - IDX_CATLG 
-- Indice catalografico - descreve a obra por palavras chave. 
CREATE TABLE EXLIBRIS.IDX_CATLG(
    COD_IDX_CATLG INT NOT NULL AUTO_INCREMENT, 
    COD_OBRA INT NOT NULL, 
    IDX_CATLG CHAR(30) NOT NULL, 
    PRIMARY KEY(COD_IDX_CATLG,COD_OBRA), 
    CONSTRAINT FK_OBRA_IDX_CATLG 
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION
); 

-- TS006 - AVALIACAO 
CREATE TABLE EXLIBRIS.AVALIACAO(
	COD_AVALIACAO INT NOT NULL AUTO_INCREMENT, 
	COD_EXEMPLAR INT NOT NULL, 
	COD_OBRA INT NOT NULL, 
	COD_PESSOA INT NOT NULL, 
	NOTA INT NOT NULL, 
	AVALIACAO CHAR(255) NOT NULL, 
	TS_AVALIACAO TIMESTAMP NOT NULL, 
	PRIMARY KEY(COD_AVALIACAO, COD_EXEMPLAR, COD_OBRA, COD_PESSOA), 
	CONSTRAINT FK_AVALIACAO_EXEMPLAR
		FOREIGN KEY(COD_EXEMPLAR) 
        REFERENCES EXLIBRIS.EXEMPLAR(COD_EXEMPLAR)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_AVALIACAO_OBRA 
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION,
	CONSTRAINT FK_AVALIACAO_PESSOA
		FOREIGN KEY(COD_PESSOA) 
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION
);

-- TS006 - OPINIAO 
CREATE TABLE EXLIBRIS.OPINIAO(
	COD_OPINIAO INT NOT NULL AUTO_INCREMENT, 
	COD_AVALIACAO INT NOT NULL, 
	COD_EXEMPLAR INT NOT NULL, 
	COD_OBRA INT NOT NULL, 
	COD_PESSOA INT NOT NULL, 
	SG_TIPO_OPINIAO CHAR(3) NOT NULL, 
	PRIMARY KEY(COD_OPINIAO, COD_AVALIACAO, COD_EXEMPLAR, COD_OBRA, COD_PESSOA), 
	CONSTRAINT FK_OPINIAO_AVALIACAO
		FOREIGN KEY(COD_AVALIACAO) 
        REFERENCES EXLIBRIS.AVALIACAO(COD_AVALIACAO)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_OPINIAO_EXEMPLAR
		FOREIGN KEY(COD_EXEMPLAR) 
        REFERENCES EXLIBRIS.EXEMPLAR(COD_EXEMPLAR)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_OPINIAO_OBRA 
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION,
	CONSTRAINT FK_OPINIAO_PESSOA
		FOREIGN KEY(COD_PESSOA) 
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_OPINIAO_SIGLA
		FOREIGN KEY(SG_TIPO_OPINIAO) 
        REFERENCES EXLIBRIS.TIPO_OPINIAO(SG_TIPO_OPINIAO)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION		
);

-- ****************************************************************************
--  Criacao das tabelas associativas
-- ****************************************************************************

-- TA001 - AUTORES 
CREATE TABLE EXLIBRIS.AUTORES(
	COD_OBRA INT NOT NULL, 
    COD_PESSOA INT NOT NULL, 
    PRIMARY KEY(COD_OBRA, COD_PESSOA), 
    CONSTRAINT FK_OBRA_AUTORES
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_PESSOA_AUTORES
		FOREIGN KEY(COD_PESSOA)
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION 
); 

-- TA002 - COLABORADORES 
CREATE TABLE EXLIBRIS.COLABORADORES(
	COD_PESSOA INT NOT NULL, 
	COD_EXEMPLAR INT NOT NULL, 
    COD_OBRA INT NOT NULL, 
    COD_PAPEL INT NOT NULL, 
    PRIMARY KEY(COD_EXEMPLAR, COD_OBRA, COD_PESSOA), 	
    CONSTRAINT FK_PESSOA_COLAB
		FOREIGN KEY(COD_PESSOA)
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 		
    CONSTRAINT FK_EXEMPLAR_COLAB
		FOREIGN KEY(COD_EXEMPLAR)
        REFERENCES EXLIBRIS.EXEMPLAR(COD_EXEMPLAR)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION,
    CONSTRAINT FK_OBRA_COLAB
		FOREIGN KEY(COD_OBRA)
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
    CONSTRAINT FK_PAPEL_COLAB
		FOREIGN KEY(COD_PAPEL)
        REFERENCES EXLIBRIS.PAPEL(COD_PAPEL)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION
); 

-- TA003 - IDIOMAS_EXEMPLAR
CREATE TABLE EXLIBRIS.IDIOMAS_EXEMPLAR(
	COD_EXEMPLAR INT NOT NULL, 
	COD_OBRA INT NOT NULL, 
    SG_IDIOMA_ISO639 CHAR(3) NOT NULL, 
    PRIMARY KEY(COD_EXEMPLAR, COD_OBRA, SG_IDIOMA_ISO639), 
    CONSTRAINT FK_EXEMPLAR_IDIOMA 
		FOREIGN KEY(COD_EXEMPLAR) 
        REFERENCES EXLIBRIS.EXEMPLAR(COD_EXEMPLAR)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_EXEMPLAR_IDIOMA_OBRA
		FOREIGN KEY(COD_OBRA) 
        REFERENCES EXLIBRIS.OBRA(COD_OBRA)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_EXEMPLAR_IDIOMA_IDIOMA
		FOREIGN KEY(SG_IDIOMA_ISO639) 
        REFERENCES EXLIBRIS.IDIOMA(SG_IDIOMA_ISO639)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION		
); 

-- TA004 - ENDERECO_PESSOA
CREATE TABLE EXLIBRIS.ENDERECO_PESSOA(
	COD_PESSOA INT NOT NULL, 
    COD_ENDERECO INT NOT NULL, 
    PRIMARY KEY(COD_PESSOA, COD_ENDERECO), 
    CONSTRAINT FK_PESSOA_ENDERECO
		FOREIGN KEY(COD_PESSOA) 
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_ENDERECO_ENDERECO
		FOREIGN KEY(COD_ENDERECO) 
        REFERENCES EXLIBRIS.ENDERECO(COD_ENDERECO)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION
);

-- TA005 - TELEFONE_PESSOA
CREATE TABLE EXLIBRIS.TELEFONE_PESSOA(
	COD_PESSOA INT NOT NULL, 
    COD_TELEFONE INT NOT NULL, 
    PRIMARY KEY(COD_PESSOA, COD_TELEFONE), 
    CONSTRAINT FK_PESSOA_TELEFONE
		FOREIGN KEY(COD_PESSOA) 
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_ENDERECO_TELEFONE
		FOREIGN KEY(COD_TELEFONE) 
        REFERENCES EXLIBRIS.TELEFONE(COD_TELEFONE)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION
); 

-- TA005 - EMAIL_PESSOA
CREATE TABLE EXLIBRIS.EMAIL_PESSOA(
	COD_PESSOA INT NOT NULL, 
    COD_EMAIL INT NOT NULL, 
    PRIMARY KEY(COD_PESSOA, COD_EMAIL), 
    CONSTRAINT FK_PESSOA_EMAIL
		FOREIGN KEY(COD_PESSOA) 
        REFERENCES EXLIBRIS.PESSOA(COD_PESSOA)
        ON DELETE NO ACTION 
        ON UPDATE NO ACTION, 
	CONSTRAINT FK_ENDERECO_EMAIL
		FOREIGN KEY(COD_EMAIL) 
        REFERENCES EXLIBRIS.EMAIL(COD_EMAIL)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION
); 


-- *******************************************************************************************
--  VIEWS - Cria as views  do sistema
-- *******************************************************************************************

CREATE VIEW EXLIBRIS.ESTADO_BRASIL AS 
SELECT * FROM ESTADO WHERE SG_PAIS = 'BR'; 

CREATE VIEW EXLIBRIS.PROVINCIA_CANADA AS 
SELECT * FROM ESTADO WHERE SG_PAIS = 'CA'; 

CREATE VIEW EXLIBRIS.ESTADO_AMERICANO AS 
SELECT * FROM ESTADO WHERE SG_PAIS = 'US'; 
